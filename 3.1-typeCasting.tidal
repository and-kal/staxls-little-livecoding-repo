-----------------------------------
--           intro               --
--                               --
--   relevant note channels      --
--      1,2                      --
--                               --
--     relevant CC channels      --
--     1-8: impactor             --
--     9-12: kick                --
-----------------------------------

let 
  midiN chan = s "midi" # midichan (chan - 1) -- ^ MIDI channels in TC are 0-indexed 
  ccDis chan val = ccv val # ccn chan # s "midi" -- ^ this one is patterning CC values (make sure to use `segment` when applying continuous patterns/oscillators)
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
  ccDisrand1 chan val1 val2 = 
    ccn chan 
    # ccv (segment 50 (range val1 val2 $ rand)) 
    # s "midi" -- ^ this one is for sending one random value per cycle
  speedvari = cps ( range (120/60/1) (120/60/4) $ slow 16 $ tri)
in
d1
$ stack [ 
  n "-24" # midiN 1, -- impactor
  ccDisrand1 1 40 100, -- pitch
  ccDisrand1 2 0 127, -- pan
  -- ccDisrand1 3 30 90, -- vol
  ccDisrand1 4 0 127, -- reverse
  ccDisrand1 5 0 127, -- delay
  ccDisrand1 6 0 127, -- delaymode
  ccSeg 7 (range 80 30 $ slow 32 $ sine), -- attack
  ccSeg 8 (range 100 120 $ slow 32 $ sine) -- decay
  , 
  n "[-24,-23,-22,-21]" # midiN 2 # legato 0.125, -- kick+perc
  ccDis 9 ("[20|40|60|90]"), -- perc release
  ccSeg 10 (range 60 120 $ perlin) -- perc detune
]
 # speedvari 

hush

-----------------------------------
--           part one            --
--                               --
--   relevant note channels      --
--      3,4,5,6                  --
--                               --
--     relevant CC channels      --
--     13-18: vitalkick          --
--     19-24: hat                --
--     25-30: percs              --
--     31-36: mel                --
-----------------------------------

let 
  structure = mask "[10010 11100 10101 00101 01110]/2"
  midiN chan = s "midi" # midichan (chan - 1) 
  ccDis chan val = ccv val # ccn chan # s "midi" 
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
in
d1
$
somecyclesBy (1/3) (rev)
$
someCyclesBy (1/4) (rev)
$
someCyclesBy (1/6) (zoom (0, 0.875))
$
whenmod 18 15 (fastSqueeze "1 0.75")
$
someCyclesBy (1/4) ((1/4) <~)
$
whenmod 18 16 ((slow 2) . (brak))
$
stack 
[
  structure $ s "midi*12" # note "<0!2 -5!2 0!2 -7!2>" # midichan (3-1) -- kick
  ,
  degradeBy 0.5 $ mask "fffftf" $ n "2*6" # midiN 5 -- swoosh
  ,
  mask "fffftf" $ n "3*6" # midiN 5 -- clap
  ,
  n "1*12" # midiN 5 -- hat
  ,
  n "0/12" # midiN 5 -- sfx
  ,
  slow 4 
  $
  n (scale "yu" "<0 4 9 4 0 9>") # midiN 4 -- fm
  # legato 1
  ,
  ccSeg 13 (range 0 120 $ slow 8 $ sine) -- kick osc3
  ,
  ccSeg 14 (range 0 120 $ slow 8 $ sine) -- kick bloop dist
  ,
  ccDis 15 "<0 20 70 80 90>" -- kick warp
  ,
  ccDis 25 "[10|120]" -- clap chorus
]
  # cps(162/60/4)

hush

-----------------------------------
--           part two            --
--                               --
--  relevant note channels       --
--      7,8,9,10                 --
--                               --
--     relevant CC channels      --
--     37-42:                    --
--     43-48:                    --
--     49-54:                    --
--     55-60:                    --
-----------------------------------

let 
  midiN chan = s "midi" # midichan (chan - 1) 
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
  ccDis chan val = ccv val # ccn chan # s "midi" 
  -- | creating a polyrhythm in TidalCycles mini-notation 
  -- | using numbers from The On-Line Encyclopedia of Integer Sequences!
  integerSequence = [1, 1, 2, 2, 5, 4, 7, 7, 11, 9, 8, 6, 9, 4, 6] -- Number of primitive permutation groups of degree n
  integerSequenceHalf1 = [1, 1, 2, 2, 5, 4, 7, 7] -- Number of primitive permutation groups of degree n
  integerSequenceHalf2 = [11, 9, 8, 6, 9, 4, 6] -- Number of primitive permutation groups of degree n
  notesPoly0 = map (\x -> "1@" ++ show (x)) integerSequence
  notesPoly1 = map (\x -> "0@" ++ show (x)) integerSequenceHalf2
  rhythmDivider = (*) (maximum integerSequence) 3
  integerRhythm0 = parseBP_E("{" ++ (unwords $ notesPoly0) ++ "}%" ++ show (rhythmDivider))
  integerRhythm1 = parseBP_E("{" ++ (unwords $ notesPoly1) ++ "}%" ++ show (rhythmDivider))
  in
d2
$
stack [
  n integerRhythm0 # midiN 7 
  ,
  n integerRhythm1 # midiN 7
]
  # cps(185/60/4)

hush

-----------------------------------
--           part three          --
--                               --
--  relevant note channels       --
--      11,12,13,14              --
--                               --
--   61-66:                      --
--   67-72:                      --
--   73-78:                      --
--   79-84:                      --
-----------------------------------


let 
  pattern = "{0@5 1@3 0@4 0@7 1@3 0@7}%16"
  mike x = note (unwrap $ fmap (x) $ pattern) 
  midiN chan = s "midi" # midichan (chan - 1) 
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
  ccDis chan val = ccv val # ccn chan # s "midi" 
in
d3
$
every 4 ((rev) . (fast 1.5))
$
whenmod 24 21 (linger (1/12))
$ 
whenmod 26 22 (fast (range 0.25 1.5 $ slow 4 $ saw))
$ 
stack [ 
  mike (["0", "1", "~"]!!) # midiN 11 -- kick+snare
  ,
  every 3 (|+ note (choose[12,24,36])) $ slow 2 $ note "-24 ~" # midiN 12 -- growl
  ,
  somecyclesBy (1/3) (|+ note (choose[5,7,9]))
  $
  mike (["0*8", "0*8", "~"]!!) # midiN 13 -- hat
]
  # cps(97/60/2)

hush

-----------------------------------
--           intermission        --
--                               --
--  relevant note channels       --
--      15,16                    --
--                               --
--   85-90: bass                 --
--   91-96: piano                --
-----------------------------------

let 
  midiN chan = s "midi" # midichan (chan - 1) 
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
  ccDis chan val = ccv val # ccn chan # s "midi" 
in
d4
$
somecyclesBy (1/4) (bite 4 ("[3..0]"))
$
somecyclesBy (1/4) (brak)
$
someCyclesBy (1/3) (|+ n (choose[12,24]))
$
stack [ 
  (|- n 24)
  $
  n (scale "wholetone" "[0 3 9 6 0 1 6 3] / 2")
  # midiN 15 -- bass
  ,
  (|+ n (choose[0,7,12,19]))
  $
  n (scale "wholetone" "[[0,3,6,9] [0,1,3,6]]/ 2")
  # midiN 16 -- cmi
  # legato 0.25
  ,
  sometimesBy (1/8) (|+ val 10)
  $
  ccDis 92 2 -- delaytime
]
  # cps(85/60/4)

hush