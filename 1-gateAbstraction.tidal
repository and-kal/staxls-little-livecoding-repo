-----------------------------------
--           intro            --
--                               --
--  relevant note channels (0-i) --
--    12,13,14,15                --
--                               --
--     relevant CC channels      --
--     6-8-127:  rings           --
-----------------------------------

hush

let pattern = ascii "<r a n d oo m>"
    melody = "[~ 0 [2 7]? 9 ~ 3]"
in
d1
$ stack [
    (|- note 12) 
    $ plyWith 8 ((slow 4) . (|- note 4)) 
    $ struct (pattern) 
    $ s "midi" # note (scale "hexSus" melody) 
    # midichan 12 -- dexed 
    ,
    (|+ note 7) 
    $ plyWith 8 ((slow 3) . (|+ note 1)) 
    $ struct (inv pattern) 
    $ s "midi" # note (scale "hexSus" melody) 
    # midichan 13 -- glänta
    , 
    s "midi/8" # n 0 # legato 0.25
    # midichan 14
    , 
    ccv (segment 60 $ range 0 100 (slow 8 $ isaw)) # ccn "[7, 8]" # s "midi"
    ,
    s "midi" # n 0
    # midichan 15 -- kick + exciter
] # cps(174/60/8)

hush

-- panic
once $ ccv 0 # ccn "[6,123]" # s "midi"

-----------------------------------
--           part one            --
--                               --
--  relevant note channels (0-i) --
--      0,1,2,3                  --
--                               --
--     relevant CC channels      --
--     1-8:                      --
--     9-16:                     --
--     17-24:                    --
--     25-32:                    --
-----------------------------------

-- TODO: finetune Vital

let 
  tempo = (156/60/4)
  pattern = "[0 1 0 1!2 0 1!3 1!4 0 1!5 0 1!6 2 1!7 3 1!8]"
  -- pattern = "[0 1 3 1 0 1 2 0 1 0 1 2 1 3 1]"
  patAbstr x = note (unwrap $ fmap (x) $ pattern)
  midiN chan = s "midi" # midichan chan
  midiCC chan val = ccv val # ccn chan
in 
  d2
  $
  stack [
    whenmod 8 6 (0.125 <~)
    $
    whenmod 17 16 ((ply 2) . (slow 4))
    $
    whenmod 19 16 (degradeBy 0.5)
    $
    whenmod 48 24 (every 2 (rev))
    $
    patAbstr (["-24","~","-22","[-21|-23]"]!!) # midiN 0 -- kick, snare, clap|hat
    ,
    whenmod 9 7 (|+ note 12)
    $
    note "<12 14>" # midiN 1 -- vital
    # legato 0.25
    ,
    midiCC 3 (segment 20 $ fast 2 $ range 40 127 perlin) -- delay freq
    ,
    midiCC 4 70 -- delay bubbles
    ,
    midiCC 5 127  -- kick dry
    ,
    midiCC 6 (segment 60 $ fast 8 $ range 40 127 tri) -- hat tremolo speed
    ,
    midiCC 1 0 -- delay (set to 127 for transition)
  ]
  # s "midi"
  # cps tempo

hush

-----------------------------------
--           part two            --
--                               --
--  relevant note channels (0-i) --
--      4,5,6,7                  --
--                               --
--     relevant CC channels      --
--     33-40:                    --
--     41-48:                    --
--     49-56:                    --
--     57-64:                    --
-----------------------------------

hush

-- TODO: macros 49+50 not in use

let 
  midiAddr chan = s "midi" # midichan chan
  midiCC chan val = ccv val # ccn chan # s "midi"
in 
d3
$
  stack [
  slow 6 $ note ("c4'7sus4 a4'7sus4 f4'7sus4") # midiAddr 4 -- chords
  # legato 6
  , 
  whenmod 14 12 (# amp 1)
  $
  whenmod 12 10 (# amp 0.9)
  $
  someCyclesBy (1/4) (|+ note 8)
  $
  sometimesBy (1/8) (0.25 ~>)
  $
  -- note (run 8) # midiAddr 5 -- mainbreak 1
  slow 2 $ note (run 16) # midiAddr 5 # amp 0.8 -- mainbreak 2
  -- slow 2 $ note (run 16) # midiAddr 5 # amp 0.85 -- mainbreak 3 (gabber)
  ,
  midiCC 41 10  -- heavy panning
  ,
  (|- note "<10!8>")
  $
  rarely (fast 2) $ (|+ note (irand 12)) $ note (scale "minorPentatonic" "[~ 0]") # midiAddr 6 -- vox
  -- ,
  -- midiCC 50 (segment 20 $ slow 2 $ range 0 127 perlin)  -- vox pitch window
  ,
  midiCC 51 "<0 20 40 60 100!8>"  -- vox nimbus d/w
] # cps (170/60/4)

hush

-----------------------------------
--           part three          --
--                               --
--  relevant note channels (0-i) --
--      8,9,10,11                --
--                               --
--     relevant CC channels      --
--     65-72:                    --
--     73-80:                    --
--     81-88:                    --
--     89-96:                    --
-----------------------------------

-- TODO: add some more elements?
-- + EQ BD and stuff

let 
  pattern = "{0*2 2*2 1 0*2 1 0 2*2}%8"
  midiCC chan val = ccv val # ccn chan # s "midi"
in
d4
$ 
whenmod 14 10 rev
$
whenmod 18 14 (linger (1/16))
$
sometimesBy (1/16) (0.125 <~)
$
whenmod 22 18 (slow 2)
$
stack [
  n (unwrap $ fmap (["0", "~", "~"]!!) $ pattern) # s "midi" # midichan "10" -- kick
  ,
  n (unwrap $ fmap (["~", "~", "2"]!!) $ pattern) # s "midi" # midichan "10" -- snare
  ,
  slow 2 
  $ 
  n (unwrap $ fmap (["~", "3", "~"]!!) $ pattern) # s "midi" # midichan "10" -- fx
  ,
  ccv 55 # ccn 81 # s "midi" -- delay snare (default: 45)
  ,
  ccv "<90!5 120 70 20>" # ccn 85 # s "midi" -- snare tune
  ,
  ccv (segment 24 $ range 60 90 $ slow 8 $ sine) # ccn 83 # s "midi" -- fx pitch hack transpose
  ,
  ccv (segment 60 $ range 40 90 $ slow 2 $ sine) # ccn 84 # s "midi" -- fx train text
  ,
  n "[14,15]*16" # s "midi" # midichan "10" -- metallic
  ,
  -- -- TODO: replace with lighter 303
  rarely (|+ n 7)
  $
  n (scale "pelog" ("0 0 0 2 0 0 7 0 0 4 0 5 1 0 6 0")) # s "midi" # midichan "11" -- acid
  ,
  midiCC 89 35 -- acid decay
  ,
  midiCC 91 64 -- acid pan (default: 64)
]
  # cps (172/60/4)

hush

-- ╔════════════════════╗
-- ║    skit  (opt.)    ║
-- ║                    ║
-- ║  with unused MIDI  ║
-- ║  ch. 2: addit synth║
-- ║  ch. 8: alter ego  ║
-- ║  ch. 9: phys mod   ║
-- ╚════════════════════╝

let melody = scale "ritusen" ("{0 3 1 2 3 4 2 2 0 1}%2")
in
d6
$
degradeBy 0.75
$ 
sometimes (0.25 <~)
$
(|- note 24)
$
note melody # s "midi" # midichan "[2,8,9]"
  # cps (175/60/4)

hush

-- ╔════════════════════╗
-- ║   interlude        ║
-- ║                    ║
-- ║  with \gendy3 UGen ║
-- ╚════════════════════╝

let
 cfilt = pF "cfilt"
 ampdist = pF "ampdist"
 durdist = pF "durdist"
in
d7 $
 whenmod 3 2 (bite 4 "[3 1 2 0]") $
 whenmod 20 15 (hurry 1.5) $
 (hurry 0.25) . (# room 0.2) . (# size 0.2) $
 someCycles (jux rev) $
 whenmod 5 3 (# fshift (range (-400) 10000 $ cosine)) $
 whenmod 3 2 (|+ note "<12 24 36>") $ note (scale "hungarianMinor" ("[1 2 [16 7] 4*8 [10*3, 11]  1*4]")) 
 # s "gendy3" 
 # cfilt (range 2000 18000 $ slow 4 $ sine)
 # shape (1/3)
 # ampdist "[0.1 0.5 1]" # durdist "[0.2 1]"