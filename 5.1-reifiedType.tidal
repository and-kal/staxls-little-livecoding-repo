
-------------------------------------------------
--           part one                          --
--                                             --
--   relevant note channels                    --
--      1,2,3,4                                --
--                                             --
--     relevant CC channels                    --
--     1-24:                                   --
-- inspired by Mike Hodnick once again         --  
-- https://www.youtube.com/watch?v=E_8lIIg2iJQ --
-------------------------------------------------

-- TODO: swap out bass (chan 4)

let 
  pattern = (
    -- ((segment 1 $ choose[(1/16),(1/8)..(1/1)]) ~>) $ 
    "{1 0 1 0 1 1 1 1 0 0 0 0 1 0 0 }%8") 
    -- :: Pattern Bool
  rest = 
    -- (slow "<1 2 3 5 4>" $ 
    "{1!6 0}%8"
    -- ) :: Pattern Bool
  hatsMask = (sometimes rev) $ "0 1 0 1"
  midiN chan = s "midi" # midichan (chan - 1) 
  ccDis chan val = ccv val # ccn chan # s "midi" 
  ccDisrand1 chan val1 val2 = 
    ccn chan 
    # ccv (segment 50 (range val1 val2 $ rand)) 
    # s "midi" -- ^ this one is for sending one random value per cycle
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
in
d1
$
whenmod 50 45 (slow "[3!3 0.5]")
$
whenmod 65 50 ((slow "6") . (ply 8))
$
whenmod 40 35 ((linger (1/12)) . (0.5 ~>))
$
mask rest
$
while "[1 0!7]" (fast (3/4))
$
stack [
    mask pattern $ struct "1*8" $ note 0 # midiN 1 -- ^ kick
    , whenmod 8 5 (|+ ccv 127) $ ccDis 2 0 -- ^ kick ultracompression
    , ccv "<20!4 100>" # ccn 3 # s "midi" -- kick OD transients
    , mask (inv pattern) $ struct "1*8" $ note 1 # midiN 1 -- ^ snare
    , sometimes (rev) $ struct "1*8" $ note "[2 3]" # midiN 1 -- ^ hats
    , degradeBy 0.75 $ mask hatsMask $ struct "1*4" $ note 4 # midiN 1 -- ^ fm
    , ccDisrand1 1 60 100
    , degradeBy 0.75 $ mask (inv hatsMask) $ struct "1*4" $ note 5 # midiN 1 -- ^ blib (CZ)
    , degradeBy 0.5 $ slow 2 $ note "[6|7]" # midiN 1 -- ^ Murakami 
    , slow 2 $ n (scale "minPent" "[0|2] [3|4] [3|5] [4|5]") # midiN "[2 3]" -- ^ jupiter + diva
    -- , n (scale "minPent" "0..7") # midiN 4 -- ^ bass  
]
  # cps(158/60/2)

hush

-------------------------------------------------
--           part two                          --
--                                             --
--   relevant note channels                    --
--      5,6,7,8                                --
--                                             --
--     relevant CC channels                    --
--     25-48:                                  --
-------------------------------------------------

-- TODO: introduce more variation
-- + something melodic

let 
  midiN chan = s "midi" # midichan (chan - 1) 
  ccDis chan val = ccv val # ccn chan # s "midi" 
  ccDisrand1 chan val1 val2 = 
    ccn chan 
    # ccv (segment 50 (range val1 val2 $ rand)) 
    # s "midi" -- ^ this one is for sending one random value per cycle
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
  basePat = "<0 [1 2] 2 [1 2 0] 1 2 [2 1]>*4"
in
d2
$
whenmod 36 33 (zoom (1/4, 4)) 
$
whenmod 12 9 (fast "<1.25 1.5>")
$
whenmod 50 45 ((slow 8) . (ply 8))
$
somecyclesBy (1/6) (rev)
$ 
stack [
  whenmod 42 38 (degradeBy 1)
  $
  n (fit 1 [0..2] basePat) # midiN 5 -- 0..2=kick + FX
  , 
  (0.5 <~) $ n "<~ 12 ~ 17>" # midiN 5 -- 12=snare
  , 
  whenmod 6 8 (fast (3/4))
  $ 
  every 3 rev $ n "[0!3 ~ 2!4]*2" # midiN 6 -- ^ hat
  ,
  whenmod 32 16 (|+ ccv 90) -- ^ add clicks half of the time
  $
  ccn 31 # ccv 0 # s "midi" 
  , ("[1|0]" <~) -- ^ introducing another randomness generator here, otherwise the two `choose` will always be in sync
  $
  ccn 27 # ccv (cycleChoose [0, 105]) # s "midi" -- ^ grain pitch
  , ccn 30 # ccv (cycleChoose [30, 120]) # s "midi" -- ^ grain freq
  ,
  n (scale "harmonicMajor" $ (unwrap $ fit 0 ["c'min9", "gs'min9", "fs'min9"] basePat)) # midiN 8 -- synth
  ,
  every 4 ((fast 4) . (|+ ccv (segment 32 $ range 10 127 $ rand))) $ ccn 43 # ccv 0 # s "midi" -- ^ grain freq
]
# cps (161/60/4)

hush

-------------------------------------------------
--           part three                        --
--                                             --
--   relevant note channels                    --
--      9,10,11,12                             --
--                                             --
--     relevant CC channels                    --
--     49-72:                                  --
-------------------------------------------------

let 
  midiN chan = s "midi" # midichan (chan - 1) 
  ccDis chan val = ccv val # ccn chan # s "midi" 
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
  basePat = "~@2 1@3 0@5 1@5 ~@4 0@6 1 0@5 1@9 ~@3"
  bpm = (165/60/4)
  varBpm1 = [bpm*1.5, bpm/1.5]
  varBpm2 = [bpm, bpm*2]
  varBpm3 = [bpm, bpm*1.25]
in
d3 
-- $
-- every 2 (rev)
$
whenmod 10 8 ((rev) . (fast "0.75 1.25"))
$ stack [
  struct basePat $ note (-24) # midiN 9 -- ^ kick
  , struct (inv basePat) $ note (-22) # midiN 9 -- ^ clap
  , note "-21" # midiN 9 -- ^ snare
  , note "-20*16" # midiN 9 -- ^ hat
  , sometimesBy (1/32) rev $ struct (basePat) $ slow 12 $ (note (scale "lydianMinor" ("[1..12]"))) # midiN 10 -- ^ synth
  , (|+ n (irand 5)) $ n "<~!3 -24>" # midiN 11 -- ^ snare
  , ccDis "[61,62]" "<10 40 60 120 90>" -- ^ snare
] 
-- # cps (slow 4 $ listToPat varBpm3)
# cps (bpm)

hush

-------------------------------------------------
--           part four                         --
--                                             --
--   relevant note channels                    --
--      13,14,15,16                            --
--                                             --
--     relevant CC channels                    --
--     73-96:                                  --
-------------------------------------------------

-------------------------------------------------
--           part five                         --
--                                             --
--   relevant note channels                    --
--      1,2,3,4                                --
--                                             --
--     relevant CC channels                    --
--     97-112:                                 --
-------------------------------------------------

---------------------------------------------------------------
--                         part six                          --
--                                                           --
--                 relevant note channels                    --
--                    5,6,7,8                                --
--                                                           --
--                   relevant CC channels                    --
--                   113-127:                                --
-- keep in mind, that #123 is reserved and can't be assigned --
---------------------------------------------------------------