   _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._
 ,'_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._`.
( (                                                         ) )
 ) )                                                       ( (
( (        Thank you all for coming out!                    ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                My name is S t a x l                    ( (
( (                                                         ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )     I will play a little set of livecoded music now   ( (
( (                                                         ) )
 ) )           using a language/tool called                ( (
( (                         T i d a l C y c l e s           ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )       The visual part is done with                    ( (
( (              M i l k d r o p                            ) )
 ) )                                                       ( (
( (_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._) )
 `._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._,'

-----------------------------------
--           part three (alt.)   --
--                               --
--   relevant note channels      --
--      8,9,10                   --
--                               --
--     relevant CC channels      --
--     57-64: vital              --
--     65-72:                    --
--     73-80: break              --
-----------------------------------

-- TODO: EQ!

let how = (165/60/4)
in
d3
$ stack [
  slow 4 $ n ("<g5'minor69 d5'm9 f4'm7s9>") # s "midi" # midichan 8 # legato 0.9 -- pad
  , 
  someCycles (rev)
  $ whenmod 28 24 (# amp 1) -- 'amp' to control velocity chain select [1 = 127] 
  $ someCycles (linger (1/16) . (|+ n (choose[0,5])))
  $ rarely (|- n "[1|2]") 
  $ n ("[0..7]*2") # s "midi" # midichan 10 # amp 0.4
  , 
  n ("[-22|-19]*<1!3 2!3 4 8> ~!7") # s "midi" # midichan 9 -- heavy kick 
  ,
  someCycles (|+ ccv 80) $ ccv 0 # ccn 73 # s "midi" -- fattener
  ,
  whenmod 24 20 (|- ccv 120) $ ccv 120 # ccn 74 # s "midi" -- transpose main break
]
  # cps(how)

hush

-----------------------------------
--           part four           --
--                               --
--   relevant note channels      --
--      11,12,13                 --
--                               --
--     relevant CC channels      --
--     81-88: gemkick            --
--     89-96: impact             --
--     97-104:                   --
-----------------------------------

-- TODO: add textures
-- + vary kick

let 
  mel = (scale "minPent" "[c4 e4 _ a3 _]")
  kick = s "midi" # midichan 11
  diva = s "midi" # midichan 12
  alien = s "midi" # midichan 13
in 
d4 
$
whenmod 8 6 (rev)
$
whenmod 11 7 (fast "1 3")
$ stack [
  someCycles (|+ n 36)
  $ cat [
    n (mel) # diva
    , 
    (|+ note 2) $ n (mel) # up (3) # diva
    ,
    n (mel) # up (-3) # diva
  ] 
  ,
  n "[[-19|-11]*<1!6 4!2> ~]" # kick
  ,
  ccv "[30|70|120]" # ccn "83" # s "midi" -- kick attack
  ,
  whenmod 14 11 (|+ n 48) $ n "[~!4 12|19|31]?" # alien
]
  # cps (145/60/2) 

hush