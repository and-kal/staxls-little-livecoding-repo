   _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._
 ,'_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._`.
( (                                                         ) )
 ) )                                                       ( (
( (        Thank you all for coming out!                    ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                My name is S t a x l                    ( (
( (                                                         ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )     I will play a little set of livecoded music now   ( (
( (                                                         ) )
 ) )           using a language/tool called                ( (
( (                         T i d a l C y c l e s           ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                                                       ( (
( (_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._) )
 `._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._,'



-----------------------------------
--           part one            --
--                               --
--   relevant note channels      --
--      0,1,2,3                  --
--                               --
--     relevant CC channels      --
--     1-8:                      --
--     9-16:                     --
--     17-24:                    --
--     25-32:                    --
-----------------------------------

let 
  pattern = "[0 1 0 1!2 0 1!3 0 1!4 0 1!5 0 1!6 2 1!7 3 1!8]"
  patAbstr x = note (unwrap $ fmap (x) $ pattern)
  midiAddr chan = s "midi" # midichan chan
in 
  d1 
  $
  stack [
    whenmod 8 6 (0.125 <~)
    $
    whenmod 17 16 ((ply 2) . (slow 4))
    $
    every 2 (rev)
    $
    patAbstr (["-24","~","-22","-21"]!!) # midiAddr 0 -- kick
    ,
    whenmod 9 8 (|+ note 12)
    $
    note "<12 14>" # midiAddr 1 -- vital
    # legato 0.25
  ]
  # cps(140/60/4)

-----------------------------------
--           part two            --
--                               --
--   relevant note channels      --
--      4,5,6,7                  --
--                               --
--     relevant CC channels      --
--     33-40:                    --
--     41-48:                    --
--     49-56:                    --
--     57-64:                    --
-----------------------------------

let 
  midiAddr chan = s "midi" # midichan chan
in 
d2 
$
  slow 6 $ note "c5'6by9 gs4'6by9 f4'6by9" # midiAddr 4 -- chords
  # legato 6

-----------------------------------
--           part three          --
--                               --
--   relevant note channels      --
--      8,9,10,11                --
--                               --
--     relevant CC channels      --
--     65-72:                    --
--     73-80:                    --
--     81-88:                    --
--     89-96:                    --
-----------------------------------


-----------------------------------
--           part four           --
--                               --
--   relevant note channels      --
--    12,13,14,15                --
--                               --
--     relevant CC channels      --
--     97-104:                   --
--     105-112:                  --
--     113-120:                  --
--     121-127:                  --
-----------------------------------

hush