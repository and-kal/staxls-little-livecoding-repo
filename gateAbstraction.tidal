   _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._
 ,'_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._`.
( (                                                         ) )
 ) )                                                       ( (
( (        Thank you all for coming out!                    ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                My name is S t a x l                    ( (
( (                                                         ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )     I will play a little set of livecoded music now   ( (
( (                                                         ) )
 ) )           using a language/tool called                ( (
( (                         T i d a l C y c l e s           ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                                                       ( (
( (_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._) )
 `._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._,'



-----------------------------------
--           part one            --
--                               --
--   relevant note channels      --
--      0,1,2,3                  --
--                               --
--     relevant CC channels      --
--     1-8:                      --
--     9-16:                     --
--     17-24:                    --
--     25-32:                    --
-----------------------------------

let 
  tempo = (140/60/4)
  pattern = "[0 1 0 1!2 0 1!3 1!4 0 1!5 0 1!6 2 1!7 3 1!8]"
  -- pattern = "[0 1 3 1 0 1 2 0 1 0 1 2 1 3 1]"
  patAbstr x = note (unwrap $ fmap (x) $ pattern)
  midiN chan = s "midi" # midichan chan
  midiCC chan val = ccv val # ccn chan
in 
  d1 
  $
  stack [
    whenmod 8 6 (0.125 <~)
    $
    whenmod 17 16 ((ply 2) . (slow 4))
    $
    -- whenmod 19 16 (degradeBy 0.5)
    -- $
    -- whenmod 48 24 (every 2 (rev))
    -- $
    patAbstr (["-24","~","-22","[-21|-23]"]!!) # midiN 0 -- kick, snare, clap
    ,
    whenmod 9 7 (|+ note 12)
    $
    note "<12 14>" # midiN 1 -- vital
    # legato 0.25
    ,
    midiCC 1 0  -- delay (set to 127 for transition)
    ,
    midiCC 3 (segment 20 $ fast 2 $ range 40 127 perlin) -- delay freq
    ,
    midiCC 4 70 -- delay bubbles
    ,
    midiCC 5 127  -- kick dry
  ]
  # s "midi"
  # cps tempo

  hush

-----------------------------------
--           part two            --
--                               --
--   relevant note channels      --
--      4,5,6,7                  --
--                               --
--     relevant CC channels      --
--     33-40:                    --
--     41-48:                    --
--     49-56:                    --
--     57-64:                    --
-----------------------------------

scaleList

let 
  midiAddr chan = s "midi" # midichan chan
  midiCC chan val = ccv val # ccn chan # s "midi"
in 
d2 
$
  stack [
  slow 6 $ note ("c4'7sus4 a4'7sus4 f4'7sus4") # midiAddr 4 -- chords
  # legato 6
  , 
  whenmod 14 12 (# amp 1)
  $
  whenmod 12 10 (# amp 0.9)
  $
  someCyclesBy (1/4) (|+ note 8)
  $
  sometimesBy (1/8) (0.25 ~>)
  $
  -- slow 2 $ note (run 16) # midiAddr 5 # amp 0.85 -- mainbreak 3 (gabber)
  -- note (run 8) # midiAddr 5 -- mainbreak 1
  slow 2 $ note (run 16) # midiAddr 5 # amp 0.8 -- mainbreak 2
  ,
  midiCC 41 10  -- heavy panning
] # cps (170/60/4)

hush

-----------------------------------
--           part three          --
--                               --
--   relevant note channels      --
--      8,9,10,11                --
--                               --
--     relevant CC channels      --
--     65-72:                    --
--     73-80:                    --
--     81-88:                    --
--     89-96:                    --
-----------------------------------

let melody = scale "ritusen" ("{0 3 1 2 3 4 2 2 0 1}%16")
in
d3 
$ 
-- sometimes (0.25 <~)
-- $
note melody # s "midi" # midichan "[8,9]"
  # cps (165/60/4)

d3 
$ 
somecyclesBy (1/8) rev
$
somecyclesBy (1/8) (slow 2)
$
stack [
  n "0*4 ~ 0 0*2" # s "midi" # midichan "10" -- kick
  ,
  n "~ ~ 2*2 ~" # s "midi" # midichan "10" -- snare
  ,
  n "[14,15]*16" # s "midi" # midichan "10" -- metallic
]
  # cps (165/60/4)

hush

-----------------------------------
--           part four           --
--                               --
--   relevant note channels      --
--    12,13,14,15                --
--                               --
--     relevant CC channels      --
--     97-104:                   --
--     105-112:                  --
--     113-120:                  --
--     121-127:                  --
-----------------------------------

hush

d4
$
every 4 (rev)
$
whenmod 16 12 (slow "<2 3 4 0.5>") 
$
whenmod 22 17 (linger (1/8)) 
$
stack [
  sometimesBy (1/2) (|+ n (irand 16)) 
  $
  slow 2 $ n "~ 0 ~ 0!12 ~" # s "midi" # midichan "12" -- particle hihat
  ,
  ccv 0 # ccn 98 # s "midi" -- particle hihat pitch hack d/w
  ,
  someCyclesBy (1/6) (0.125 ~>) $ n "0 _ 0 _ _ 0 _" # s "midi" # midichan "13" -- kick
  ,
  n "~ 1 _ _ _ _ _" # s "midi" # midichan "13" -- snare
  ,
  n "<[~ _ 2 _ _ 2 _] ~!2>" # s "midi" # midichan "13" -- grain
  , 
  ccv (segment 60 (range 60 110 $ slow 4 $ sine)) # ccn 105 # s "midi" -- grain depth
  ,
  whenmod 25 21 (|+ ccv 127) $ ccn 106 # ccv 0 # s "midi" -- spectral freeze
  ,
  cat [
    slow 6 $ n (scale "harmonicMajor" ("0 _ _ 2 _ 4 _ 2 _ _ _ 1 _")) # s "midi" # midichan "14"
  ]
  ,
  ccn 113 # ccv (segment 20 (range 1 100 $ rand)) # s "midi" -- chord chorus (one val per cycle)
]
  # cps(165/60/4)

hush