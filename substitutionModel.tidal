   _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._
 ,'_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._`.
( (                                                         ) )
 ) )                                                       ( (
( (        Thank you all for coming out!                    ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                My name is S t a x l                    ( (
( (                                                         ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )     I will play a little set of livecoded music now   ( (
( (                                                         ) )
 ) )           using a language/tool called                ( (
( (                         T i d a l C y c l e s           ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                                                       ( (
( (_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._) )
 `._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._,'


-----------------------------------
--           part one            --
--                               --
--   relevant note channels      --
--      0,1,2,3                  --
--                               --
--     relevant CC channels      --
--     1-8                      --
--     9-16                     --
--     17-24                    --
--     25-32                    --
-----------------------------------

let pattern = "{0*2@10 1@12 1@10 1@1 1@6 1@4 1@3 1@2 [1@1]!8 1@6 1@6 2*8@5}%32"
in 
  d1 
  $ 
  stack [
    stack [
      somecyclesBy (1/8) (rev)
      $
      whenmod 32 28 (linger (1/8))
      $
      sometimes (|+ note 7)
      $
      note (unwrap $ fmap (["-17","~","~"]!!) $ pattern) # s "midi" # midichan 0 -- kick
      ,
      note (unwrap $ fmap (["~","12","~"]!!) $ pattern) # s "midi" # midichan 1 -- hat
      ,
      sometimes ((# amp 0.6) . (# legato 1) . (|+ note 36)) -- bloops
      $
      note (unwrap $ fmap (["~","~","0"]!!) $ pattern) # s "midi" # midichan 2 -- snare
      ,
      ccv (segment 127 $ range 30 60 $ slow 3 $ perlin ) # ccn 1 # s "midi" -- kick sweep
      ,
      ccv (segment 127 $ range 1 126 $ slow 8 $ sine ) # ccn "[9, 10]" # s "midi" -- hat pan + morph
    ]
    ,
    someCyclesBy (1/4) (|- n 12)
    $
    loopAt 4 $ n "[d6'7f10|d6'7f10'i|d6'7f10'ii]" # s "midi" # midichan 3 -- pad
    # legato 2
    ,
    ccv (segment 127 $ range 1 60 $ slow 8 $ sine ) # ccn 25 # s "midi" -- pad start
  ]
  # cps(152/60/4)

-----------------------------------
--           part two            --
--                               --
--   relevant note channels      --
--      4,5,6,7                  --
--                               --
--     relevant CC channels      --
--     33-40:                    --
--     41-48:                    --
--     49-56:                    --
--     57-64:                    --
-----------------------------------

let pattern = "{0@6 1@5 1@5 1@5 1*2@5 0@8 2@8 3@6 3@2}%32"
in
d2
-- $ someCyclesBy (1/6) (ply 2)
-- $ someCyclesBy (1/6) (0.25 <~)
-- $ whenmod 30 26 (slow "<3 2>")
$ stack [ 
  -- n (unwrap $ fmap (["0", "~", "2", "3"]!!) $ pattern)
  -- # s "midi" # midichan 4 -- k c s
  -- , 
  n (unwrap $ fmap (["1", "1", "1", "1"]!!) $ pattern) 
  # s "midi" # midichan 4 -- hat
  -- ,
  -- n (scale "wholetone" (unwrap $ fmap (["[22|24]", "~", "~", "~"]!!) $ pattern))
  -- # s "midi" # midichan 5 # legato 1 -- digits
  -- ,
  -- ccn 41 # ccv (range 1 120 $ rand) # s "midi" -- digits chorus
  -- ,
  -- slow 4 $ ccn 42 # ccv (range 40 120 $ ((1 <~) $ rand)) # s "midi" -- digits flanger chorus
  -- ,
  -- sometimesBy (1/6) (|+ n "[24|-24]")
  -- $
  -- slow 4 $ n (scale "wholetone" "g4")
  -- # s "midi" # midichan 6 -- grain
]
  # cps(80/60/2)


-----------------------------------
--           part three          --
--                               --
--   relevant note channels      --
--      8,9,10,11                --
--                               --
--     relevant CC channels      --
--     65-72: glÃ¤nta             --
--     73-80:                    --
--     81-88: simpelr            --
--     89-96:                    --
-----------------------------------

-- let repeater x = ((ply x) . (slow (x / 2)))
let repeater x = ((ply x) . (slow x))
in
-- interpolateIn 3 8
d3 
$
-- someCyclesBy (1/4) (rev)
-- $
-- whenmod 32 29 (slow (segment 64 $ range 1 6 $ saw))
-- $
-- whenmod 40 36 (repeater 64)
-- $
-- sometimesBy (1/4) ((1/12) <~)
-- $
stack [
  (|+ n (range 12 36 $ rand))
  -- (|- n (36))
  $
  n (scale "octatonic" ("[~ [0 1 2]]!2")) # s "midi" # midichan 8 -- reaktor
  # legato 0.125
  ,
  ccn 65 # ccv (range 0 66 $ ((1 <~) $ rand)) # s "midi" -- reaktor flanger wet
  ,  
  ccn 66 # ccv (range 40 127 $ ((2 <~) $ rand)) # s "midi" -- reaktor flanger
  ,
  ccn 67 # ccv (segment 6 $ range 0 127 $ saw) # s "midi" -- reaktor pan
  ,
  -- n "[[0 ~!2 2!2 1?]!2 , 3*12]" # s "midi" # midichan 9 -- drums
  -- ,
  -- sometimes (|+ n 3)
  -- $ 
  -- degradeBy (3/4) $ n (run 2) # s "midi" # midichan 10 # legato 0.75 -- akaizer
  -- ,
  -- fast 2 $ ccn 81 # ccv (range 0 127 $ ((3 <~) $ rand)) # s "midi" -- loop start
  -- ,
  somecyclesBy (1/8) (|+ n "[12|24]")
  $
  loopAt 4 $ n ("[c'min|f'min'ii]") # s "midi" # midichan 11 -- pad surge
  # legato 4
]
  # cps (135/60/4)

-----------------------------------
--           part four           --
--                               --
--   relevant note channels      --
--    12,13,14                   --
--                               --
--     relevant CC channels      --
--     97-104: break             --
--     105-112:                  --
--     113-120:                  --
-----------------------------------

let 
  repeater x = ((ply x) . (slow x ))
  add13Chord = s "midi" # midichan 13 # legato 1
  bass = s "midi" # midichan 14 
  mel1 = "[0 ~ 2 _] 1"
  mel2 = "[~ 0 1 ~] 2"
in
d4 
-- $
-- whenmod 16 14 (slow 2)
-- $
-- whenmod 19 16 (repeater 8)
-- $
-- whenmod 17 15 ((brak))
$
stack [
  -- whenmod 48 42 ((sometimesBy (1/2) (|+ n 12)) . (# amp 0.0125)) -- alt. gabber break
  -- $
  -- sometimesBy (1/16) (|+ n 2)
  -- $
  -- whenmod 15 13 (|+ n 7)
  -- $
  someCyclesBy (1/4) (# amp (range 0.75 1 $ perlin))
  $ n (run 8) # s "midi" # midichan 12 -- break
  , 
  ccn 105 # ccv (range 1 120 $ rand) # s "midi" -- add13 detune
  -- ,
  -- slow 3 $ cat [
  --   n (scale "harmonicMajor" (fit 2 [0, 2, 12] (mel1))) # add13Chord -- add13
  --   ,
  --   n (scale "harmonicMajor" (fit 1 [0, 2, 9] (mel2))) # add13Chord -- add13
  --   ,
  --   n (scale "harmonicMajor" ("~ cs'6to9")) # add13Chord -- add13
  -- ]
  ,
  n (scale "harmonicMajor" "<-15 _ -12 -17 _ -12>") # bass
]
  # cps(170/60/4)

hush

-----------------------------------
--           bOoOoOnUs           --
--                               --
--   relevant note channels      --
--             15                --
--                               --
--     relevant CC channels      --
--     121-127:                  --
-----------------------------------

-- note to self: don't have all instruments on simultaneously
d5 
  $ whenmod 8 6 (ply 2)
  $ whenmod 11 9 (brak)
  $ whenmod 16 11 (linger (1/8))
  $ stack [
    -- n "<[[0 1]!4]!11 3>" -- occasional bloop at 12
    -- # s "midi" # midichan 15 -- gabber kick + tg
    -- # amp 0.4 -- (addressing it to 1st vel chain)
    -- ,
    -- ccn 121 # ccv "<66!5 74>" # s "midi" 
    -- ,
    fast 16
    $
    randslice 128
    $ 
    s "gig-x:2" -- lain
      # cut 1
      # up (-3)
      # amp 1.5
    ,
    often (|+ n 1)
    $ n (run 8) 
    # s "midi" # midichan 15 -- break
    # amp 1 -- (addressing it to 2nd vel chain)
  ]
  # cps(178/60/4)


  hush