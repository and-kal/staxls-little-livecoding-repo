-----------------------------------
--           part five           --
--                               --
--   relevant note channels      --
--      1,2,3,4                  --
--                               --
--     relevant CC channels      --
--     1-6:                      --
--     7-12: digits chorus       --
--     13-18:                    --
--     19-24: kick               --
-----------------------------------

let pattern = "{0@6 1@5 1@5 1@5 1*2@5 0@8 2@8 3@6 3@2}%32"
in
d8
-- $ someCyclesBy (1/6) (ply 2)
-- $ someCyclesBy (1/6) (0.25 <~)
-- $ whenmod 30 26 (slow "<3 2>")
$ stack [ 
  -- n (unwrap $ fmap (["~", "0", "2", "3"]!!) $ pattern)
  -- # s "midi" # midichan 0 -- k c s
  -- , 
  n (unwrap $ fmap (["1", "1", "1", "1"]!!) $ pattern) 
  # s "midi" # midichan 0 -- hat
  -- ,
  -- n (scale "wholetone" (unwrap $ fmap (["[22|24]", "~", "~", "~"]!!) $ pattern))
  -- # s "midi" # midichan 1 # legato 1 -- digits
  -- ,
  -- ccn 7 # ccv (range 1 120 $ rand) # s "midi" -- digits chorus
  -- ,
  -- slow 4 $ ccn 8 # ccv (range 40 120 $ ((1 <~) $ rand)) # s "midi" -- digits flanger chorus
  -- ,
  -- sometimesBy (1/6) (|+ n "[24|-24]")
  -- $
  -- slow 4 $ n (scale "wholetone" "g4")
  -- # s "midi" # midichan 2 -- grain
  -- ,
  -- n (unwrap $ fmap (["[0,1]", "~", "~", "~"]!!) $ pattern) 
  -- # s "midi" # midichan 3 -- 808k
  -- ,
  -- ccv (segment 40 $ range 0 120 $ slow 8 $ saw) # ccn "[19,20]" # s "midi" -- kick layer saturator d/w & depth
]
  # cps(80/60/2)

hush

-----------------------------------
--           part six            --
--                               --
--   relevant note channels      --
--      5,6,7,8                  --
--                               --
--     relevant CC channels      --
--     25-30: reaktor            --
--     31-36:                    --
--     37-42: simpler            --
--     43-48:                    --
-----------------------------------

-- let repeater x = ((ply x) . (slow (x / 2)))
let repeater x = ((ply x) . (slow x))
in
d9
-- $
-- someCyclesBy (1/4) (rev)
-- $
-- whenmod 32 29 (slow (segment 64 $ range 1 6 $ saw))
-- $
-- whenmod 40 36 (repeater 64)
-- $
-- sometimesBy (1/4) ((1/12) <~)
$
stack [
  (|+ n (range 12 36 $ rand))
  -- (|- n (36))
  $
  n (scale "octatonic" ("[~ [0 1 2]]!2")) # s "midi" # midichan 4 -- reaktor
  # legato 0.125
  -- ,
  -- ccn 25 # ccv (range 0 66 $ ((1 <~) $ rand)) # s "midi" -- reaktor flanger wet
  -- ,  
  -- ccn 26 # ccv (range 40 127 $ ((2 <~) $ rand)) # s "midi" -- reaktor flanger
  -- ,
  -- ccn 27 # ccv (segment 6 $ range 0 127 $ saw) # s "midi" -- reaktor pan
  -- ,
  -- n "[[0 ~!2 2!2 1?]!2 , 3*12]" # s "midi" # midichan 5 -- drums
  -- ,
  -- sometimes (|+ n 3)
  -- $ 
  -- degradeBy (3/4) $ n (run 2) # s "midi" # midichan 6 # legato 0.75 -- akaizer
  -- ,
  -- fast 2 $ ccn 37 # ccv (range 0 127 $ ((3 <~) $ rand)) # s "midi" -- loop start
  -- ,
  -- somecyclesBy (1/8) (|+ n "[12|24]")
  -- $
  -- loopAt 4 $ n ("[c'min|f'min'ii]") # s "midi" # midichan 7 -- pad surge
  -- # legato 4
]
  # cps (135/60/4)

-----------------------------------
--           part seven          --
--                               --
--   relevant note channels      --
--    9,10,11[,12]               --
--                               --
--     relevant CC channels      --
--     49-54: break              --
--     55-60:                    --
--     61-66:                    --
--    [67-72: ...]               --
-----------------------------------

let 
  repeater x = ((ply x) . (slow x ))
  add13Chord = s "midi" # midichan 9 # legato 1
  bass = s "midi" # midichan 10 
  mel1 = "[0 ~ 2 _] 1"
  mel2 = "[~ 0 1 ~] 2"
in
d10
$
-- whenmod 16 14 (slow 2)
-- $
-- whenmod 19 16 (repeater 8)
-- $
-- whenmod 17 15 ((brak))
-- $
-- stack [
--   whenmod 48 42 ((sometimesBy (1/2) (|+ n 12)) . (# amp 0.0125)) -- alt. gabber break
--   $
--   sometimesBy (1/16) (|+ n 2)
--   $
--   whenmod 15 13 (|+ n 7)
--   $
--   someCyclesBy (1/4) (# amp (range 0.75 1 $ perlin))
--   $ n (run 8) # s "midi" # midichan 8 -- break
--   , 
--   ccn 55 # ccv (range 1 120 $ rand) # s "midi" -- add13 detune
--   ,
  slow 3 $ cat [
    n (scale "harmonicMajor" (fit 2 [0, 2, 12] (mel1))) # add13Chord -- add13
    ,
    n (scale "harmonicMajor" (fit 1 [0, 2, 9] (mel2))) # add13Chord -- add13
    ,
    n (scale "harmonicMajor" ("~ cs'6to9")) # add13Chord -- add13
  ]
  -- ,
  -- n (scale "harmonicMajor" "<-15 _ -12 -17 _ -12>") # bass
-- ]
  # cps(170/60/4)

hush

-----------------------------------
--    part eight    (outro)      --
--                               --
--  relevant note channels       --
--    13,14,15                   --
--                               --
--     relevant CC channels      --
--     73-78: amen particles     --
--     79-84: drum rack          --
--     85-90: phase dist. synth  --
-----------------------------------

d11
$
-- every 4 (rev)
-- $
-- whenmod 16 12 (slow "<2 3 4 0.5>") 
-- $
-- whenmod 22 17 (linger (1/8)) 
-- $
stack [
  sometimesBy (1/2) (|+ n (irand 16)) 
  $
  slow 2 $ n "~ 0 ~ 0!12 ~" # s "midi" # midichan 12
  # amp (range 0.4 0.6 $ slow 4 $ saw) -- particle hihat 
  -- # amp 0.6 -- alt. arp
  -- ,
  -- ccv 64 # ccn 73 # s "midi" -- particle hihat formant shift (default: 50)
  -- ,
  -- ccv 0 # ccn "[74,75]" # s "midi" -- particle hihat pitch hack d/w
  -- ,
  -- someCyclesBy (1/6) (0.125 ~>) $ n "0 _ 0 _ _ 0 _" # s "midi" # midichan 13 -- kick
  -- ,
  -- n "~ 1 _ _ _ _ _" # s "midi" # midichan 13 -- snare
  -- ,
  -- n "<[~ _ 2 _ _ 2 _] ~!2>" # s "midi" # midichan 13 -- grain
  -- , 
  -- whenmod 25 21 (|+ ccv 127) $ ccn 80 # ccv 0 # s "midi" -- spectral freeze
  -- ,
  -- cat [
  --   slow 6 $ n (scale "harmonicMajor" ("0 _ _ 2 _ 4 _ 2 _ _ _ 1 _")) # s "midi" # midichan "14"
  -- ]
  -- ,
  -- whenmod 18 9 (|+ ccv 4) $ ccv 107 # ccn 65 # s "midi" -- grain transpose
  -- ,
  -- ccv (segment 60 (range 60 110 $ slow 4 $ sine)) # ccn 81 # s "midi" -- tremolo depth
  -- ,
  -- ccn 82 # ccv (segment 20 (range 1 120 $ rand)) # s "midi" -- snare tremolo speed
  -- ,
  -- ccn 85 # ccv (segment 20 (range 1 100 $ rand)) # s "midi" -- chord chorus (ccn first -> one val per cycle)
]
  # cps(165/60/4)

  hush