hush

-----------------------------------
--           part one            --
--                               --
--   relevant note channels      --
--      1,2,3,4                  --
--                               --
--     relevant CC channels      --
--     97-100: wt                --
--     101-104:                  --
--     105-108:                  --
--     109-113:                  --
-----------------------------------

let 
  melody = "{0@3 1@4 2@3 3@4 4@3 5!3 ~@2 6@3 7@4 8@3 9@4 10@3 11!3 ~@2}%16"
  pattern = "{0@3 1@4 0@3 0@4 0@3 1!3 2@2}%16"
  hat = "{3@3 3@4 3@3 3@4 3@3 ~!3 3@2}%16"
  midiN chan = s "midi" # midichan (chan - 1) 
  ccDis chan val = ccv val # ccn chan # s "midi" 
  ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
in
d1
$
somecyclesBy (1/8) (brak)
$
whenmod 30 22 (slow "4 2 0.5 0.25")
$ 
stack [ 
  (|- note "<41!3 36!3 29!3 24!3 12!3 0!3 7!3 12!3>")
  $
  never (|- note "7")
  $
  note (scale "hirajoshi" melody)
  # s "midi" # midiN 1 -- ^ melody
  ,
  (|- note 24)
  $
  note (pattern <> hat)
  # s "midi" # midiN 2 -- ^ percs
  ,
  (|- note "21")
  $
  whenmod 10 7 (fast 2)
  $
  note ("0*6")
  # s "midi" # midiN 2 -- ^ lazer
  ,
  whenmod 11 9 (|- ccv 60) 
  $
  ccDis 10 "90" -- ^ lazer pitch
]
  # cps(152/60/4)

hush

import Data.List

-----------------------------------
--           collatzintermission --
--                               --
--            note channel       --
--      5                        --
--                               --
--     CC channels               --
--     104-111                   --
-----------------------------------

let 
    midiN chan = s "midi" # midichan (chan - 1) 
    ccDisrand1 chan val1 val2 = 
        ccn chan 
        # ccv (segment 50 (range val1 val2 $ rand)) 
        # s "midi"
    ccSeg chan val = ccv (segment 50 $ val) # ccn chan # s "midi" 
    -- | creating a polyrhythm in TidalCycles mini-notation from a Collatz chain/sequence
    myNotes = [ x | (a, b) <- zip (replicate 8 1) (replicate 8 0), x <- [a, b]]
    collatzChain :: Integral t => t -> [t]
    collatzChain 1 = [1]
    collatzChain x
        | (x `mod` 2) == 0 = x:collatzChain (x `div` 2)
        | otherwise = x:collatzChain (x*3 + 1)
    collatzZip y z = [show (a) ++ "@" ++ show (b) | (a, b) <- zip y z]
    collatzBeat = parseBP_E("{" ++ unwords (collatzZip myNotes (collatzChain 17)) ++ "}%64")
    -- collatzBeat = parseBP_E("[" ++ unwords (collatzZip myNotes (collatzChain 37)) ++ "]")
in 
d6
$ 
stack [
    (|- n 24)
    $
    n collatzBeat # midiN 5
    ,
    ccDisrand1 104 40 100, -- pitch
    ccDisrand1 105 0 127, -- pan
    ccDisrand1 106 30 90, -- vol
    ccDisrand1 107 0 127, -- reverse
    ccDisrand1 108 0 100, -- FX amount
    ccDisrand1 109 0 100, -- FX wetness
    ccv (segment 50 $ range 0 90 $ slow 16 $ (0.25 <~) $ sine) # ccn 110 # s "midi", -- attack
    ccv (segment 50 $ range 95 120 $ slow 16 $ sine) # ccn 111 # s "midi" -- decay
    ,
    ((3/6) ~>) $ n "-22" # midiN 5
]
    # cps (80/60/4)

hush

-----------------------------------
--            note channel       --
--      6,7,8                    --
--                               --
--     CC channels               --
--     112-115                   --
--     116-119                   --
--   don't forget to Ableton Link--
-----------------------------------

let 
    midiN chan = s "midi" # midichan (chan - 1) 
    midiPunch cond val chan = cond (|+ ccv val) $ ccn chan # ccv 0 # s "midi"
in
d7
$
someCyclesBy (1/8) rev
$
whenmod 35 31 (slow (5/3))
$
stack [
    sometimes (|+ n 4)
    $
    n "[3..0]" # midiN 6 -- breaks
    ,
    fast 4 
    $ 
    ccn 112 # ccv (segment 80 (range 0 127 $ rand)) 
    # s "midi" -- chain select
    , midiPunch (every 8) 127 113 -- pitch hack
    , midiPunch (every 9) 127 114 -- redux
    , midiPunch (whenmod 25 23) 127 115 -- flanger
    ,
    whenmod 12 10 (|- n 12)
    $
    somecyclesBy (1/4) (|- n "[7|12]")
    $
    somecyclesBy (1/3) (|+ n "[12|24]")
    $
    n (scale "minPent" "<[0,4,6,7]/2 [0,2,4,5]/2 >") # legato 1
    # midiN 7
    ,
    (|- n 19)
    $
    n (scale "minPent" "<0 5 [4 5] 2 [7 6]>") # midiN 8 -- bass
]
    # cps (176/60/4)

hush

-----------------------------------
--           part six            --
--                               --
--   relevant note channels      --
--      9,10,11,12               --
--                               --
--     relevant CC channels      --
--     x-x:                      --
--     120-121: digits chorus    --
--     x-x:                      --
--     122,124: kick             --
-- (note that midi CC 123 is     --
-- reserved for 'all notes off') --
-----------------------------------


let 
    pattern = "{0@6 1@5 1@5 1@5 1*2@5 0@8 2@8 3@6 3@2}%32"
    midiN chan = s "midi" # midichan (chan - 1) 
in
d8
$ someCyclesBy (1/6) (ply 2)
$ someCyclesBy (1/6) (0.25 <~)
$ whenmod 30 26 (slow "<3 2>")
$ stack [ 
  -- n (unwrap $ fmap (["~", "0", "2", "3"]!!) $ pattern)
  -- # midiN 9 -- k c s
  -- , 
  n (unwrap $ fmap (["1", "1", "1", "1"]!!) $ pattern) 
  # midiN 9 -- hat
  ,
  -- n (scale "wholetone" (unwrap $ fmap (["[22|24]", "~", "~", "~"]!!) $ pattern))
  -- # midiN 10 # legato 1 -- digits
  -- ,
  -- ccn 120 # ccv (range 1 120 $ rand) # s "midi" -- digits chorus
  -- ,
  -- slow 4 $ ccn 121 # ccv (range 40 120 $ ((1 <~) $ rand)) # s "midi" -- digits flanger chorus
  -- ,
  sometimesBy (1/6) (|+ n "[24|-24]")
  $
  slow 4 $ n (scale "wholetone" "g4")
  # midiN 11 -- grain
  -- ,
  -- n (unwrap $ fmap (["[0,1]", "~", "~", "~"]!!) $ pattern) 
  -- # midiN 12 -- 808k
  -- ,
  -- ccv (segment 40 $ range 0 120 $ slow 8 $ saw) # ccn "[122,124]" # s "midi" -- kick layer saturator d/w & depth
]
  # cps(80/60/2)

hush

--------------------------------------------
--           part seven                   --
--                                        --
--   relevant note channels   (0-indexed) --
--      13,14,15,16                       --
--                                        --
--     relevant CC channels:              --
--     49-52: plaits                      --
--    53-56: kick                         --
--                                        --
--------------------------------------------

let 
  pattern = "{0@2 0@3 1@4 2@5 1@4 0@3 0@2}%16"
  midiN chan = s "midi" # midichan (chan - 1) 
in 
  d5
  -- $ somecyclesBy (1/4) (rev)
  -- $ whenmod 14 11 (linger "[0.125|0.0625]")
  $ stack [
      n (scale "phrygian" (unwrap $ fmap (["~","-12","-7"]!!) $ pattern)) 
      # midiN 14 -- vital
      , 
      -- somecyclesBy (0.25) ((|+ n (run 24)) . (fast 6))
      -- $ 
      -- n (unwrap $ fmap (["[0|1|2]","~","~"]!!) $ pattern) 
      -- # midiN 16 -- snare
      -- ,      
      whenmod 10 8 (|- n 24)
      $
      somecyclesBy (1/4) (|+ n "[-2|12]")
      $ 
      n (scale "phrygian" (unwrap $ fmap (["c'7f5","~","f'7f5"]!!) $ pattern)) 
      # midiN 13 -- MI Plaits
      # legato 2
      , ccv (segment 100 $ range 60 120 $ slow 6 $ sine) # ccn "[49]" # s "midi" -- harmonics
      , ccv (segment 100 $ range 80 120 $ slow 6 $ sine) # ccn "[50]" # s "midi" -- timbre
      , ccv (segment 100 $ range 60 120 $ slow 24 $ sine) # ccn "[51]" # s "midi" -- morph
      -- , 
      -- whenmod 32 27 (|+ n 48)
      -- $ 
      -- n (scale "phrygian" ("[-24|-12|-19]*1?")) # s "midi" # midichan 14
      -- # legato (range 0.2 1 $ slow 4 $ saw) -- fxkick
      -- , ccv (segment 100 $ range 0 60 $ slow 6 $ sine) # ccn 53 # s "midi" -- flanger
      -- , ccv (segment 100 $ range 0 60 $ slow 15 $ sine) # ccn 54 # s "midi" -- flanger
      -- -- , ccv (segment 100 $ range 0 120 $ slow 12 $ sine) # ccn 55 # s "midi" -- grain
      -- , 
      -- n (unwrap $ fmap (["~","-24","-17"]!!) $ pattern) 
      -- # midiN 15 -- kick/laz
  ]
  # cps(140/60/8)
  -- # cps (range (150/60/4) (150/60/8) $ slow 4 $ sine)

  hush

--------------------------------------------
--           outro                        --
--                                        --
--   custom SC synth only                 --
--------------------------------------------

let
 cfilt = pF "cfilt"
 ampdist = pF "ampdist"
 durdist = pF "durdist"
in
d7 $
 whenmod 3 2 (bite 4 "[3 1 2 0]") $
 whenmod 20 15 (hurry 1.5) $
 (hurry 0.25) . (# room 0.2) . (# size 0.2) $
 someCycles (jux rev) $
 whenmod 5 3 (# fshift (range (-400) 10000 $ cosine)) $
 whenmod 3 2 (|+ note "<12 24 36>") $ note (scale "hungarianMinor" ("[1 2 [16 7] 4*8 [10*3, 11]  1*4]")) 
 # s "gendy3" 
 # cfilt (range 2000 18000 $ slow 4 $ sine)
 # shape (1/3)
 # ampdist "[0.1 0.5 1]" # durdist "[0.2 1]"
