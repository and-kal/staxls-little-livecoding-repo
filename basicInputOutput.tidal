   _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._
 ,'_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._`.
( (                                                         ) )
 ) )                                                       ( (
( (        Thank you all for coming out!                    ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )                My name is S t a x l                    ( (
( (                                                         ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )     I will play a little set of livecoded music now   ( (
( (                                                         ) )
 ) )           using a language/tool called                ( (
( (                         T i d a l C y c l e s           ) )
 ) )                                                       ( (
( (                                                         ) )
 ) )       The visual part is done by                      ( (
( (              M i l k d r o p                            ) )
 ) )                                                       ( (
( (_.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._) )
 `._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._.-._,'


let choices = choose (map (* 8) [5,4..1])
in
d1 
    $
    someCyclesBy (1/6) (jux (# speed (-0.5))) 
    $
    someCyclesBy (1/4) (# speed 0.5)
    $
    whenmod 30 15 ((chop (choices)) . (fast (choices/2)))
    $
    stack [
        loopAt 11 $ randslice 4 $ fast 4 $ s "BBC:3" -- # accelerate "-3 1!4 3"
        ,
        loopAt 10 $ s "BBC:2" -- # accelerate "-0.2 1!4 0.8" 
        ,
        loopAt 20 $  s "BBC:1" -- # accelerate "-0.5 1!4 0.75"
        ,
        loopAt 5 $ s "BBC:0" -- # accelerate "-2 1!4 2"
        ,
        loopAt 12 $ s "padu:12" # fshift (-800) # up (-20)
    ] 
    # shape 0.6
    # speed (range (-2) 2 $ slow 30 $ sine) 
    # cps 1 -- at cps 1, when loopAt's param matches the samples length the sample will play in normal speed


setcps(165/60/4)

d2
    $ whenmod 8 1 ((slow 4) . (ply 8))
    $ somecyclesBy (1/8) (# speed (-1)) 
    $ somecyclesBy (1/8) (hurry 2) 
    $ stack [
        s "undefined:21" 
        # cut 1
        # end 0.5
        # shape (range 0 0.85 $ cF 0 "32") 
        # pan (fast 16 $ range 0 1 $ sine)
        , 
        cat [
            s "[null:1 null:1 null:1 {kicky:11}%3 ~]" # cut 2 # gain 1.25
            , rarely (# up "[2|-1]") $ s "kicky:10?!4 undefined:5 kicky:10!2 sd:4" 
            , loopAt 16 $ someCyclesBy (1/4) ((chop 128) . (striate 2)) $ s "null:4" 
        ]
        , s "[~*2 undefined:5*3]"
        , rarely (# up 3) $ s "minima:16*12" # cut 3 # pan (fast 2 $ smooth "-1 1") 
    ] 
    # cps(165/60/4)

hush

-----------------------------------
--           part one            --
--                               --
--   relevant note channels      --
--      1,2,3,15,16              --
--                               --
--     relevant CC channels      --
--     1-8: Surge                --
--     9-16: Reaktor             --
--     17-24: Kick               --
--     25-32: Vocode             --
-----------------------------------


let pattern = "{0@3 1@4 2@2 0@3 2@2 2@4 1@2}%16"
in 
d1
$ somecyclesBy (1/6) ((ply 8) . (slow 4))  
$ somecyclesBy (1/6) (slow 2)  
$ somecyclesBy (1/8) (linger (1/4))  
$ somecyclesBy (1/12) (trunc (1/8))  
$ somecyclesBy (1/10) (stutter 8 (1/4))  
$ stack [
    sometimes (|+ n ("[-1|1|2]")) $
    midichan (fmap ([2,14,15]!!) $ pattern ) # s "midi" # n "0" -- kick[helm],snare[shared],clap[shared]
    , 
    midichan (fmap ([3,3,3]!!) $ pattern ) # s "midi" # n "24" -- vocode[helm]
    , 
    -- sometimes ((1/16) <~) $ n "0*8" # s "midi" # midichan 3 
    -- , 
    sometimes (|- n (choose [2,4])) $ n (scale "whole" (unwrap $ fmap (["~", "~", 0]!!) $ pattern )) # s "midi" # midichan 0 # legato 1 -- aalto 
    , 
    somecyclesBy 0.5 (|+ n 14)
    $
    n (unwrap $ fmap (["~", "~", (-5)]!!) $ pattern ) # s "midi" # midichan 1 -- reaktor
    # legato 3
    , 
    sometimes (0.5 <~) $ ccv (segment 12 $ range 20 90 $ slow 8 $ sine) # ccn 1 # s "midi" -- surge morph 
    , 
    ccv (segment 64 $ range 20 100 $ slow 32 $ saw) # ccn 9 # s "midi" -- reakt beat 
    , 
    ccv (segment 64 $ range 5 100 $ slow 8 $ tri) # ccn 10 # s "midi" -- reakt ratio
    , 
    sometimes ((1/3) ~>) 
    $
    ccv (segment 64 $ range 0 127 $ slow 16 $ saw) # ccn 11 # s "midi" -- reakt lfo
]
# cps (160/60/4)

hush

d3
$ hurry 1.08
$ someCyclesBy (1/8) (|+ n "[1|2]")
$ stack [
    chop "32"
    $ someCyclesBy (1/8) (randslice "[2|4]")
    $ someCyclesBy (1/8) ((striate 8) . (# fshift (range (-500) 500 sine)) . (# gain 0.75))
    $ someCyclesBy 0.25 (linger (1/16))
    $ whenmod 10 8 ((slow 8) . (slice 4 "3 2 1 0")) 
    $ whenmod 12 10 ((jux rev) . (# cut 0) . (# gain 0.9)) 
    $ whenmod 15 13 (# speed 8) 
    $ whenmod 20 18 (loopAt 4) 
    $ whenmod 23 20 ((hurry (1.05/2)) . (# cps (170/60/2)))
    $ every 2 (0.25 <~)
    $ every 5 (0.25 <~)
    $ every 8 (trunc 0.1)
    $ loopAt 2
    $ n 29 # s "Breaks" # gain 1.2 # shape 0.55 # cut 1
    ,
    loopAt 12 $ s "padu:11"
    ,
    sometimes (# accelerate "-4 1") $ s "[undefined:10]/4" 
]
# cps (170/60/4)

hush

-----------------------------------
--           part two            --
--                               --
--   relevant note channels      --
--      5,6,7,8,15               --
--                               --
--     relevant CC channels      --
--     33-40: Plaits             --
--     41-48: Plaits variant     --
--     49-56: Kick+Surge         --
-----------------------------------

hush

let pattern = "{0@2 0@8 1@4 0@6 1@6 0@6 2@2}%16"
in 
d4 
$ somecyclesBy (1/4) (rev)
$ whenmod 14 11 (linger (1/12))
$ stack [
    someCyclesBy (1/8) (|+ n 7)
    $ n (unwrap $ fmap (["c3","~","d3"]!!) $ pattern) # s "midi" # midichan 6 -- Kick2 + Surge
    , n (unwrap $ fmap (["~","[[~ c4]*16, [f3 ~]*16]","~"]!!) $ pattern) # s "midi" # midichan 7 -- Hihat [hitick]
    , n (unwrap $ fmap (["0","0*18","~"]!!) $ pattern) # s "midi" # midichan 14 -- LEX-Snare
    , somecyclesBy (1/4) (|+ n "[-2|12]")
    $ n (scale "partch" (unwrap $ fmap (["c'7f5","~","f'7f5"]!!) $ pattern)) # s "midi" # midichan "[4|5]" -- MI Plaits
    # legato 0.5 
    , ccv (segment 100 $ range 30 80 $ slow 8 $ sine) # ccn "[33,41]" # s "midi"
    , ccv (segment 100 $ range 0 100 $ fast 2 $ sine) # ccn "[34,42]" # s "midi"
    , ccv (segment 100 $ range 30 60 $ slow 4 $ sine) # ccn "[35,43]" # s "midi"
    , ccv (segment 100 $ range 0 60  $ slow 8 $ sine) # ccn "[36,44]" # s "midi"
    , ccv (segment 100 $ range 0 127 $ slow 8 $ tri) # ccn 49 # s "midi" -- kick distortion
    , ccv (segment 100 $ range 0 127 $ slow 16 $ sine) # ccn 50 # s "midi" -- kick click pitch
]
# cps(144/60/4)


hush


d5
$ whenmod 16 12 (sometimesBy 0.25 (hurry 2))
$ someCyclesBy 0.25 (0.125 <~) 
$ someCyclesBy (1/8) (linger (1/16))
$ someCyclesBy 0.25 (slow 4)
$ stack [
    s "[AcdBrnOut:18*4]" # cut 2 -- either...
    ,
    whenmod 12 9 ((chop 16) . (striate 2)) $ s "vocaloi:0/2" -- ...or 
    , 
    someCyclesBy 0.5 (# up "[1|-1]") $ ((1/8) <~) $ s "nome:14*4" # cut 1
    , 
    s "undefined:22" # note (scale "partch" (choose[-1,0,1,2,3])) # cut 3 
] 
# shape 0.3
# cps (170/60/4)

hush

-----------------------------------
--           part three          --
--                               --
--   relevant note channels      --
--      9,10,11,12               --
--                               --
--     relevant CC channels      --
--     57-64: Vital              --
--     65-72: Kick               --
--     73-80: FM8                --
-----------------------------------


let pattern = "{0@4 3@4 3@2 2@2 1@4 0@10 1@5 2@5}%16"
in 
d1
$ whenmod 32 28 ((ply 6) . (slow 2)) 
$ whenmod 40 36 (fast 2) 
$ stack [
    degradeBy (1/3) 
    $
    sometimes (|+ n 6) $ n (scale "messiaen2" (unwrap $ fmap(["c'add9", "e'maj9", "c'maj9", "f'maj9"]!!) $ pattern)) 
    # s "midi" # midichan 8 -- xylo[vital]
    ,
    ccv (segment 100 $ range 0 100 $ slow 2 $ perlin) # ccn 57 # s "midi" 
    , 
    ccv (segment 100 $ range 30 120 $ perlin) # ccn 60 # s "midi" 
    , 
    ccv (segment 100 $ range 1 126 $ fast 3 $ cosine) # ccn 58# s "midi" -- panning 
    ,
    ccv (segment 100 $ range 1 126 $ fast 2 $ sine) # ccn 59 # s "midi" -- panning
    ,
    someCyclesBy (1/8) (+| n (run "[4|8|16|32]")) $
    n (unwrap $ fmap(["c3", "e3", "~", "~"]!!) $ pattern) # s "midi" #midichan 9 -- kick
    ,
    ccv (segment 10 $ range 0 64 $ slow 8 $ sine) # ccn 65 # s "midi" -- kick click
    ,
    somecyclesBy(1/8) (plyWith 3 (|+ n 2)) $ 
    n (scale "messiaen2" (unwrap $ fmap(["~", "~", "0", "~"]!!) $ pattern)) # s "midi" #midichan 10 -- clap
    ,
    plyWith "<2!7 4>" (|* n "[-4|4]") $ 
    n (scale "messiaen2" (unwrap $ fmap(["0", "0", "0", "~"]!!) $ pattern)) # s "midi" #midichan 11 -- rim
    ,
    (|- n 24)
    $
    n (scale "messiaen2" (unwrap $ fmap(["~", "~", "~", "0"]!!) $ pattern)) # s "midi" 
    #midichan 12 -- fm8
    #legato 0.5
    ,
    ccv (segment 10 $ range 0 100 $ slow 32 $ sine) # ccn 73 # s "midi" -- fmdetune
    ,
    ccv (segment 10 $ range 0 100 $ slow 32 $ cosine) # ccn 74 # s "midi" -- osc4
] 
# cps(148/60/4)
-- # cps( range (148/60/4) (50/60/4) $ sine)

hush